package components;

import helpers.Validation;

import java.text.SimpleDateFormat;
import java.util.Date;

import model.Message;
import model.Type;
import robert.Vaadinjpa.domain.Person;


import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.Validator;
import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.event.ShortcutAction.KeyCode;

import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;

@SuppressWarnings({ "serial", "rawtypes" })
public class Sender extends CustomComponent {
	

	public static final String PERSISTENCE_UNIT = "robert.Vaadinjpa";

	private Tabela dane = new Tabela(new SenderData(
			JPAContainerFactory
					.createEntityManagerForPersistenceUnit(PERSISTENCE_UNIT)),
			JPAContainerFactory.make(Person.class, PERSISTENCE_UNIT),
			new SimpleDateFormat("yyyy/MM/dd HH:mm:ss"));

	private final JPAContainer<Type> container = JPAContainerFactory.make(
			Type.class, PERSISTENCE_UNIT);

	private Date log = new Date();

	public Tabela getDane() {
		return dane;
	}

	public void setDane(Tabela dane) {
		this.dane = dane;
	}

	public SenderData getData() {
		return data;
	}

	public void setData(SenderData data) {
		this.data = data;
	}

	private SenderData data = new SenderData(
			JPAContainerFactory
					.createEntityManagerForPersistenceUnit(PERSISTENCE_UNIT));

	private ComboBox combobox;

	

	private TextField addresField;

	private TextField newTypeField;

	private Button buttonToaddType;

	private Button addNewType;

	@SuppressWarnings("unused")
	private Button clearButton;

	




	

	


	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */

	public Sender() {
		super();
		setSizeFull();
		buildMainLayout();
		setCompositionRoot(dane.getSenderDane().getMainLayout());

	}

	public void refreshContainer() {

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {

		createMainLayout();
		createTextArea();
		createTable();
		createSelectType();
		createButtons();

		return data.getMainLayout();
	}

	/*------------------------------Creators--------------------------------------------------*/

	private void createMainLayout() {

		dane.getSenderDane().setMainLayout(new AbsoluteLayout());
		dane.getSenderDane().getMainLayout().setImmediate(false);
		dane.getSenderDane().getMainLayout().setWidth("100%");
		dane.getSenderDane().getMainLayout().setHeight("100%");

		setWidth("100.0%");
		setHeight("100.0%");

	}

	private void createTextArea() {

		dane.getSenderDane().setTextArea(new TextArea("Wprowadź wiadomość"));
		dane.getSenderDane().getTextArea().setImmediate(false);
		dane.getSenderDane().getTextArea().setWidth("400px");
		dane.getSenderDane().getTextArea().setHeight("100px");

		dane.getSenderDane()
				.getMainLayout()
				.addComponent(dane.getSenderDane().getTextArea(),
						"top:39.0px;left:10.0px;");
	}

	private void createSendButton() {
		final BeanFieldGroup<Message> binder = new BeanFieldGroup<Message>(
				Message.class);

		dane.getSenderDane().setButton(new Button());
		dane.getSenderDane().getButton().setCaption("Send");
		dane.getSenderDane().getButton().setClickShortcut(KeyCode.ENTER);
		container.refresh();
		addButton(container, binder);
		dane.getSenderDane().getButton().setImmediate(true);
		dane.getSenderDane().getButton().setWidth("140px");
		dane.getSenderDane().getButton().setHeight("25px");

		dane.getSenderDane()
				.getMainLayout()
				.addComponent(dane.getSenderDane().getButton(),
						"top:300.0px;left:10.0px;");

	}

	public void createTable() {

		dane.getSenderDane().setTable(dane.buildPanel());
		dane.getSenderDane()
				.getMainLayout()
				.addComponent(dane.getSenderDane().getTable(),
						"top:23.0px;left:720.0px;");

	}

	private void createSelectType() {
		refreshSelect();
		dane.getSenderDane().getMainLayout()
				.addComponent(messageType(), "top:140.0px;left:10.0px;");
	}

	private void createButtons() {

		createSendButton();

		
	 clearButton = new Button("Clear selection", new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				clearSelection();

			}
		});

		Button clearFromDB = new Button("Clear from MYsql",
				new Button.ClickListener() {
					public void buttonClick(ClickEvent event) {
						clearFromMYsql();

					}
				});

		addNewType = new Button("->", new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {

				addNewType();

				

			}

		});

		buttonToaddType = new Button("+", new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {

				addTypeMessage();
				new Sender();

			}

		});
		
		Button logout = new Button("refresh");
		logout.addListener(new Button.ClickListener() {
		    @Override
		    public void buttonClick(ClickEvent event) {
		       
		        getApplication().init();
		        
		        
		    }
		});

		dane.getSenderDane().getMainLayout()
				.addComponent(clearFromDB, "top:500.0px;left:500.0px;");

		dane.getSenderDane().getMainLayout()
				.addComponent(logout, "top:500.0px;left:750.0px;");

		addbuttons();

		
		
	}
	
	

	/*---------------------------------------------------------------------------------*/

	private void addbuttons() {

		dane.getSenderDane().getMainLayout()
				.addComponent(addNewType, "top:140.0px;left:180.0px;");

	}

	private void addButton(final JPAContainer<Type> container,
			final BeanFieldGroup<Message> binder) {
		dane.getSenderDane().setButton(
				new Button("Send", new Button.ClickListener() {
					@Override
					public void buttonClick(ClickEvent event) {
						if (addresField.isValid()) {
							addMessage(container, binder);
							container.refresh();
							refreshtable();
							addresField.setValue("");
							addresField.discard();
						} else {
							getWindow().showNotification("Pleas imput correct addres area!!!");
							addresField.discard();
							
						}
					}

				}));
	}

	public void clearFromMYsql() {

		dane.getSenderDane().getEm().getTransaction().begin();
		dane.getSenderDane().removeMessage(
				(Integer) dane.getSenderDane().getTable().getValue());
		clearSelection();

		dane.getSenderDane().getEm().getTransaction().commit();

	}

	void clearSelection() {
		dane.getSenderDane().getTable()
				.removeItem(dane.getSenderDane().getTable().getValue());
	}

	public void addMessage(final JPAContainer<Type> container,
			final BeanFieldGroup<Message> binder) {
		try {
			dane.getSenderDane().getEm().getTransaction().begin();

			Type typ = getTypeValue();

			Message bean = new Message();
			bean.setMessage(dane.getSenderDane().getTextArea().getValue()
					.toString());

			bean.setType(typ);
			bean.setLog(dane.getDateFormat().format(log));
			binder.commit();
			dane.getSenderDane().getEm().persist(bean);
			dane.getSenderDane().getEm().getTransaction().commit();
			dane.getSenderDane().getTextArea().setValue(" ");
			getWindow().showNotification("Send");

		} catch (CommitException e) {

			getWindow().showNotification("Not Send!!!");
		}
	}

	private Type getTypeValue() {
		Type typ = dane.getSenderDane().findTypeById(0);
		try {

			typ = dane.getSenderDane().findTypeById(
					combobox.getValue().hashCode());
			return typ;
		} catch (Exception e) {

			getWindow().showNotification("Nie wybrano Typu!!");
		}
		return typ;

	}

	public void refreshtable() {
		dane.getSenderDane().setTable(dane.buildPanel());
		dane.getSenderDane()
				.getMainLayout()
				.addComponent(dane.getSenderDane().getTable(),
						"top:23.0px;left:720.0px;");

	}

	public void refreshSelect() {

		messageType();
		
		dane.getSenderDane().getMainLayout()
				.addComponent(messageType(), "top:140.0px;left:10.0px;");
	}

	public void addTypeMessage() {

		dane.getSenderDane().getEm().getTransaction().begin();
		Type type = new Type();

		type.setType((String) newTypeField.getValue());

		dane.getSenderDane().getEm().persist(type);
		dane.getSenderDane().getEm().getTransaction().commit();
		newTypeField.setValue("");
		getWindow().showNotification("dodano nowy typ");
		refreshSelect();
	}

	public Component messageType() {

		combobox = new ComboBox("", container);
		combobox.setInvalidAllowed(false);
		combobox.setNullSelectionAllowed(false);
		combobox.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		combobox.setItemCaptionPropertyId("type");
          
		// Allow adding new items
		combobox.setNewItemsAllowed(false);
		combobox.setScrollToSelectedItem(true);

		combobox.requestRepaint();
		
		ValueChangeListener listener = new Property.ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	
		    	if (addresField != null) {
					remove(addresField);
				}

				dane.getSenderDane()
						.getMainLayout()
						.addComponent(adressField(), "top:30.0px;left:450.0px;");
		       
		        
		    }
		};
		
		
		
		
		
        
		combobox.addListener(listener);

		return combobox;
	}

	public Component adressField() {
		
		Validation valid = new Validation();
	
		Validator a = valid.getValid().get((Integer) combobox.getValue());
		
             System.out.println(a);
             
		addresField = new TextField(a.getClass().getSimpleName());

		
		addresField.addValidator(a);
		addresField.setRequired(true);
		return addresField;

	}

	

	public Component addNewType() {

		newTypeField = new TextField("new Type");

		dane.getSenderDane().getMainLayout()
				.addComponent(newTypeField, "top:140.0px;left:210.0px;");

		dane.getSenderDane().getMainLayout()
				.addComponent(buttonToaddType, "top:140.0px;left:370.0px;");

		return newTypeField;
	}


	public void remove(Component component){
		dane.getSenderDane().getMainLayout()
		.removeComponent(component);
		
	}
	
	

}
